import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Leaderboard from './Leaderboard';
import './App.css';

function App() {
    const [leaderboardData, setLeaderboardData] = useState([]);

    useEffect(() => {
        fetchLeaderboard();
    }, []);

    const fetchLeaderboard = async () => {
        try {
            const response = await axios.get('http://localhost:5000/participants');
            setLeaderboardData(response.data);
        } catch (error) {
            console.error("Error fetching leaderboard data", error);
        }
    };

    const addParticipant = async (name, score, git) => {
        try {
            await axios.post('http://localhost:5000/participants', { name, score, git });
            fetchLeaderboard(); // Refresh leaderboard
        } catch (error) {
            console.error("Error adding participant", error);
        }
    };

    return (
        <div className="App">
            <h1>Leaderboard</h1>
            <ParticipantForm addParticipant={addParticipant} />
            <Leaderboard leaderboardData={leaderboardData} />
        </div>
    );
}

function ParticipantForm({ addParticipant }) {
    const [name, setName] = useState('');
    const [score, setScore] = useState('');
    const [git, setGit] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!name || !score || !git) return;
        addParticipant(name, score, git);
        setName('');
        setScore('');
        setGit('');
    };

    return (
        <form onSubmit={handleSubmit} className="participant-form">
            <input type="text" placeholder="Participant Name" value={name} onChange={(e) => setName(e.target.value)} required />
            <input type="number" placeholder="Score" value={score} onChange={(e) => setScore(e.target.value)} required />
            <input type="text" placeholder="GitHub Link" value={git} onChange={(e) => setGit(e.target.value)} required />
            <button type="submit">Add Participant</button>
        </form>
    );
}

export default App;
_________________________________
import React from 'react';

function Leaderboard({ leaderboardData }) {
    return (
        <div>
            <h2>Leaderboard</h2>
            <table>
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Name</th>
                        <th>GitHub Link</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    {leaderboardData.map((participant, index) => (
                        <tr key={index}>
                            <td>{index + 1}</td>
                            <td>{participant.name}</td>
                            <td><a href={participant.git} target="_blank" rel="noopener noreferrer">{participant.git}</a></td>
                            <td>{participant.score}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default Leaderboard;

_________________________________________________________________________________
import JSONData from "./leaderboard.json";

const get_leaderboard_data = () => {
  /*
    return new Promise ((resolve, reject) => {
        axios
            .get(endpoint)
            .then(response => {
                resolve(response.data);
            })
            .catch(error => {
                reject(error);
            })
    });
    */
  return new Promise((resolve, reject) => {
    resolve(JSONData);
  });
};

const Scores = (props) => {
  const [scores, setScores] = useState();
  const [isSortAsc, setIsSortAsc] = useState(true);

  useEffect(() => {
    get_leaderboard_data()
      .then((data) => {
        // sanitize the scores
        var player_score_object = {};
        data.map((score) => {
          if (!player_score_object.hasOwnProperty(score.contributor)) {
            player_score_object[score.contributor] = 0;
          }
          var clean_score = parseInt(score.points);
          player_score_object[score.contributor] += clean_score;
          return null;
        });

        // load into a list and sort
        var scores_array = [];
        for (var key in player_score_object) {
          scores_array.push({
            contributor: key,
            score: player_score_object[key],
          });
        }

        //console.log(scores_array)
        scores_array.sort((first, second) => second.score - first.score);
        setScores(scores_array);
        //console.log(scores_array)
      })
      .catch((err) => {
        console.error(err);
      });
  }, []);

  const sortArray = () => {
    let sortedArr = [...scores];
    if (isSortAsc) {
      sortedArr.sort((a, b) => {
        return a.score - b.score;
      });
      setScores(sortedArr);
    } else {
      sortedArr.sort((a, b) => {
        return b.score - a.score;
      });
      setScores(sortedArr);
    }

    setIsSortAsc(!isSortAsc);
  };

  return (
    <>
      <button className="toggleSort" onClick={sortArray}>
        Toggle sort &#8593; &#8595;
      </button>
      <table align="center">
        <thead>
          <tr>
            <th> Position </th>
            <th> Contributor </th>
            <th> Bounty </th>
          </tr>
        </thead>
        <tbody>
          {scores &&
            scores.map((score, index) => {
              return (
                <tr key={score.contributor}>
                  <td> {index + 1} </td>
                  <td> {score.contributor} </td>
                  <td> {score.score} </td>
                </tr>
              );
            })}
        </tbody>
      </table>
    </>
  );
};
export default Scores;